// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class HappyRedPacket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HappyRedPacket entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HappyRedPacket entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HappyRedPacket", id.toString(), this);
  }

  static load(id: string): HappyRedPacket | null {
    return store.get("HappyRedPacket", id) as HappyRedPacket | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimers(): Array<string> {
    let value = this.get("claimers");
    return value.toStringArray();
  }

  set claimers(value: Array<string>) {
    this.set("claimers", Value.fromStringArray(value));
  }
}

export class Claimer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Claimer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Claimer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Claimer", id.toString(), this);
  }

  static load(id: string): Claimer | null {
    return store.get("Claimer", id) as Claimer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get redpacket(): string {
    let value = this.get("redpacket");
    return value.toString();
  }

  set redpacket(value: string) {
    this.set("redpacket", Value.fromString(value));
  }
}
